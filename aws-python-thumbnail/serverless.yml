# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: gogovisor
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: aws-python-thumbnail
# "service" is the name of this project. This will also be added to your AWS resource names.
service: aws-python-thumbnail

provider:
  name: aws
  runtime: python3.12
  region: us-west-2
  stage: dev
  timeout: 10
  memorySize: 128
  environment:
    THUMBNAIL_SIZE: 128
    REGION_NAME: ${self:provider.region}
    DYNAMODB_TABLE: ${self:custom.dynamoTable}
   
  layers:
    - arn:aws:lambda:us-west-2:770693421928:layer:Klayers-p312-Pillow:5

  iam:
    role:
      statements:
        - Effect: Allow
          Action: s3:*
          Resource: '*'
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

custom:
  bucket_name: thumbnails-tutorial
  dynamoTable: img-url-table
  pythonRequirements:
    dockerizePip: true

functions:
  s3_thumbnail_generator:
    handler: handler.s3_thumbnail_generator
    events:
      - s3:
          bucket: ${self:custom.bucket_name}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .png
  list:
      handler: handler.s3_get_thumbnail_urls
      events:
        - http:
            path: images/all
            method: get 
            cors: true

  get:
      handler: handler.s3_get_item
      events:
        - http:
            path: images/get/{id}
            method: get 
            cors: true 

  delete:
      handler: handler.s3_delete_item
      events:
        - http:
            path: images/delete/{id}
            method: delete 
            cors: true 


  # update:
  #     handler: handler.s3_update_item
  #     events:
  #       - http:
  #           path: images/update/{id}
  #           method: put 
  #           cors: true

resources:
 Resources:
   ImagesDynamoDbTable:
     Type: AWS::DynamoDB::Table
     Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-python-requirements
